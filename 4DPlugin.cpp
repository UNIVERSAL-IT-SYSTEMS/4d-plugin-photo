/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Photos
 #	author : miyako
 #	2015/10/31
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

static PhotosApplication *Photos = [SBApplication applicationWithBundleIdentifier:@"com.apple.Photos"];

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Photos

		case 1 :
			Photos_get_picture(pResult, pParams);
			break;

	}
}

// ------------------------------------ Photos ------------------------------------

void Photos_get_picture(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

    NSString *photoId = Param1.copyUTF16String();

	if(Photos){
        SBElementArray *photos = [Photos mediaItems];
        PhotosMediaItem *photo = (PhotosMediaItem *)[photos objectWithID:photoId];
        /*
        PhotosMediaItem *photo = nil;
        //[photos indexOfObjectPassingTest:^BOOL(PhotosMediaItem *obj, NSUInteger idx, BOOL *stop){}] didn't work
        for(NSUInteger i = 0; i < [photos count]; ++i)
        {
            photo = [photos objectAtIndex:i];
            if ([[photo id]isEqualToString:photoId])
            {
                break;
            }else{
                photo = nil;
            }
            
            if((i % 100) == 0){
                PA_YieldAbsolute();
            }
        }
        */
        //objectWithID can return invalid pointer
        if([photo id])
        {
            BOOL usingOriginals = Param2.getIntValue();
            NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
            NSString *cachesFolder = [paths objectAtIndex:0];
            NSUUID *uuid = [[NSUUID alloc]init];
            NSString *folderName = [uuid UUIDString];
            NSURL *cachesFolderUrl = (NSURL *)CFURLCreateWithFileSystemPath(kCFAllocatorDefault,
                (CFStringRef)cachesFolder,
                kCFURLPOSIXPathStyle, true);
            NSURL *exportFolderUrl = [cachesFolderUrl URLByAppendingPathComponent:folderName isDirectory:true];
            [Photos export:[NSArray arrayWithObject:photo] to:exportFolderUrl usingOriginals:usingOriginals];
            NSURL *exportFileUrl;
            if(!usingOriginals)
            {
                //the extension is changed to jpg
                exportFileUrl = [exportFolderUrl URLByAppendingPathComponent:[[photo.filename stringByDeletingPathExtension]stringByAppendingString:@".jpg"] isDirectory:false];
            }else{
                 exportFileUrl = [exportFolderUrl URLByAppendingPathComponent:photo.filename isDirectory:false];
            }
            
            NSString *exportFilePath = (NSString *)CFURLCopyFileSystemPath((CFURLRef)exportFileUrl, kCFURLHFSPathStyle);

//            NSLog(@"exportFilePath:%@", exportFilePath);
            
            PA_Variable args[2];
            args[0] = PA_CreateVariable(eVK_Unistring);
            uint32_t len = [exportFilePath length];
            uint32_t size = (len * sizeof(PA_Unichar)) + sizeof(PA_Unichar);
            std::vector<uint8_t> buf(size);
            if([exportFilePath getCString:(char *)&buf[0] maxLength:size encoding:NSUnicodeStringEncoding]){
                PA_Unistring _path = PA_CreateUnistring((PA_Unichar *)&buf[0]);
                PA_Variable args[2];
                args[0] = PA_CreateVariable(eVK_Unistring);
                PA_SetStringVariable(&args[0], &_path);
                args[1] = PA_CreateVariable(eVK_Picture);
                PA_ExecuteCommandByID(678, args, 2);
//                *(PA_Picture*)pResult = PA_GetPictureVariable(args[1]);
                *(PA_Picture*)pResult = PA_DuplicatePicture(PA_GetPictureVariable(args[1]), 1);
                
                PA_DisposeUnistring(&_path);
                PA_ClearVariable(&args[0]);
                //do not clear args[1]; it belongs to 4D, we did not create it
            }
            [[NSFileManager defaultManager]removeItemAtURL:exportFolderUrl error:nil];
            
            [exportFilePath release];
            [cachesFolderUrl release];
            [uuid release];
        }
    }
    
    [photoId release];
}

